//
//  ptest.cpp
//  ParticleGuidedRegistration
//
//  Created by Joohwi Lee on 2/18/13.
//
//

#include <iostream>

#include "piParticleForces.h"
#include "piEntropyComputer.h"

using namespace pi;

void covtest() {
    IntensityForce force;

    // case L > S
    const int L = Attr::NATTRS;
    const static int S = 3;
    const static int S1 = 50;

    // matlab
    /*

     0.0748    0.0100   -0.0046
     0.0100    0.0677   -0.0041
     -0.0046   -0.0041    0.0911
     */
    double data[L][S] = {
        { 0.913800, 0.335311, 0.823574}
        ,{ 0.706715, 0.299225, 0.175010}
        ,{ 0.557789, 0.452593, 0.163570}
        ,{ 0.313429, 0.422646, 0.665987}
        ,{ 0.166204, 0.359606, 0.894389}
        ,{ 0.622497, 0.558319, 0.516558}
        ,{ 0.987935, 0.742545, 0.702702}
        ,{ 0.170432, 0.424335, 0.153590}
        ,{ 0.257792, 0.429356, 0.953457}
        ,{ 0.396799, 0.124873, 0.540884}
        ,{ 0.073995, 0.024434, 0.679734}
        ,{ 0.684096, 0.290185, 0.036563}
        ,{ 0.402388, 0.317521, 0.809204}
        ,{ 0.982835, 0.653690, 0.748619}
        ,{ 0.402184, 0.956936, 0.120187}
        ,{ 0.620672, 0.935731, 0.525045}
        ,{ 0.154370, 0.457886, 0.325834}
        ,{ 0.381345, 0.240478, 0.546449}
        ,{ 0.161134, 0.763898, 0.398881}
        ,{ 0.758112, 0.759327, 0.415093}
        ,{ 0.871111, 0.740648, 0.180738}
        ,{ 0.350777, 0.743688, 0.255387}
        ,{ 0.685536, 0.105920, 0.020536}
        ,{ 0.294149, 0.681560, 0.923676}
        ,{ 0.530629, 0.463261, 0.653700}
        ,{ 0.832423, 0.212163, 0.932614}
        ,{ 0.597490, 0.098519, 0.163512}
    };

    double data1[27][S1] = {
        {0.906503,0.094600,0.608232,0.914054,0.503161,0.004447,0.634553,0.754379,0.212750,0.869830,0.567855,0.890269,0.725247,0.704238,0.775186,0.003177,0.489343,0.480095,0.552042,0.510119,0.890452,0.528557,0.971602,0.503554,0.552582,0.747818,0.816574,0.735240,0.002288,0.535107,0.601177,0.126862,0.380307,0.093319,0.302700,0.830077,0.347310,0.072884,0.218232,0.377848,0.388038,0.596336,0.226851,0.520386,0.590064,0.787626,0.213053,0.322431,0.223420,0.344714}
        ,{0.056683,0.918360,0.989042,0.663293,0.531594,0.198611,0.111076,0.793496,0.918991,0.000070,0.120151,0.082094,0.417380,0.651579,0.603759,0.510080,0.444675,0.424017,0.558440,0.605144,0.166991,0.975459,0.940153,0.907040,0.640400,0.970013,0.426050,0.556150,0.944532,0.685926,0.643866,0.214641,0.072712,0.206680,0.861927,0.696360,0.141796,0.129619,0.099642,0.517978,0.289225,0.079145,0.979004,0.885283,0.231142,0.126025,0.169124,0.555165,0.673299,0.384780}
        ,{0.556736,0.558240,0.562556,0.499653,0.606287,0.438725,0.607345,0.291369,0.665162,0.679977,0.970329,0.781523,0.273171,0.331897,0.316096,0.144461,0.820848,0.176018,0.066815,0.883071,0.425243,0.877222,0.933120,0.123610,0.596649,0.695143,0.300218,0.834371,0.792477,0.955184,0.921931,0.826820,0.440281,0.302759,0.057394,0.333537,0.411535,0.981568,0.619506,0.094598,0.073087,0.576636,0.975671,0.648252,0.101946,0.524974,0.725753,0.824529,0.818786,0.594865}
        ,{0.002961,0.417641,0.495888,0.634803,0.764317,0.558291,0.889758,0.507608,0.743478,0.654880,0.839967,0.848678,0.314708,0.521569,0.433353,0.504650,0.017480,0.280557,0.581940,0.121916,0.326896,0.161335,0.983758,0.852225,0.161175,0.273268,0.680290,0.106124,0.399328,0.627752,0.219257,0.387614,0.606527,0.351522,0.730757,0.580232,0.153068,0.090242,0.103815,0.909095,0.194608,0.898172,0.289514,0.466254,0.644644,0.899480,0.256189,0.804248,0.948930,0.535121}
        ,{0.153156,0.110447,0.253041,0.086360,0.600624,0.385129,0.490686,0.237992,0.378457,0.411813,0.062317,0.450877,0.581696,0.024763,0.842779,0.568215,0.788515,0.877671,0.475858,0.290255,0.567591,0.353375,0.693036,0.175046,0.417908,0.951138,0.858516,0.256561,0.873449,0.819132,0.884904,0.318075,0.304784,0.726748,0.900880,0.287838,0.829009,0.686159,0.799062,0.207631,0.417485,0.463311,0.338433,0.095281,0.980139,0.109084,0.162767,0.024408,0.874315,0.333556}
        ,{0.407491,0.552744,0.195961,0.040807,0.722586,0.646859,0.313508,0.192685,0.474768,0.476368,0.278073,0.605325,0.689358,0.022273,0.626133,0.642170,0.540790,0.873855,0.661935,0.062342,0.826987,0.058007,0.702475,0.764166,0.369055,0.907671,0.871793,0.054124,0.674396,0.188965,0.048822,0.261779,0.406644,0.886325,0.464043,0.263971,0.739200,0.928965,0.902925,0.382065,0.292927,0.398396,0.996445,0.967821,0.101722,0.634571,0.625777,0.371506,0.393736,0.854683}
        ,{0.233446,0.111281,0.492735,0.751564,0.435215,0.585674,0.762140,0.808697,0.106262,0.388271,0.409630,0.354470,0.863868,0.798524,0.272548,0.206934,0.045476,0.489587,0.786098,0.143533,0.391682,0.444116,0.371312,0.459332,0.080265,0.457425,0.897062,0.656554,0.242366,0.751475,0.812040,0.296524,0.101012,0.051926,0.469364,0.259901,0.098870,0.141816,0.312513,0.660280,0.702139,0.104461,0.788971,0.620111,0.187866,0.080846,0.250747,0.491870,0.936962,0.265644}
        ,{0.535314,0.236022,0.710884,0.323757,0.646525,0.766331,0.954526,0.066673,0.883784,0.452057,0.626809,0.759095,0.210859,0.107812,0.514534,0.340187,0.513850,0.606282,0.190028,0.067965,0.621351,0.441094,0.064106,0.606064,0.236308,0.733171,0.843587,0.277437,0.168445,0.221580,0.032592,0.428178,0.476880,0.078559,0.153814,0.677080,0.820633,0.884416,0.281589,0.758373,0.239713,0.652236,0.794922,0.156003,0.009385,0.411232,0.262978,0.466052,0.436896,0.933940}
        ,{0.311606,0.138654,0.987619,0.066491,0.176695,0.174635,0.645884,0.195862,0.445103,0.026760,0.919103,0.589441,0.506752,0.688807,0.888401,0.327474,0.445624,0.717687,0.961509,0.185087,0.965152,0.326701,0.443452,0.364040,0.994340,0.558240,0.485151,0.709130,0.861125,0.416450,0.415042,0.192406,0.292410,0.014486,0.961795,0.519827,0.227112,0.019762,0.006782,0.173069,0.959483,0.991700,0.632369,0.398367,0.838303,0.712634,0.843928,0.041714,0.162523,0.389834}
        ,{0.708634,0.328240,0.334620,0.923257,0.876476,0.503115,0.485320,0.974782,0.668228,0.425286,0.415152,0.611570,0.425050,0.775026,0.174296,0.614965,0.491365,0.140023,0.535061,0.768677,0.828471,0.914398,0.542987,0.401945,0.909304,0.993894,0.488541,0.130296,0.326641,0.790874,0.594667,0.567478,0.016283,0.193340,0.876255,0.076754,0.106941,0.342686,0.495872,0.517380,0.305462,0.678073,0.811451,0.882505,0.481342,0.100422,0.397421,0.617002,0.309821,0.683065}
        ,{0.587061,0.346442,0.220165,0.054361,0.251690,0.382675,0.438182,0.575090,0.728216,0.105805,0.711500,0.843171,0.239700,0.791494,0.820068,0.591190,0.659889,0.583054,0.914518,0.897677,0.813402,0.494556,0.540162,0.730075,0.790787,0.389300,0.065334,0.523997,0.325152,0.399962,0.196795,0.657666,0.884416,0.026289,0.488629,0.055845,0.662776,0.238306,0.988482,0.995338,0.154915,0.428478,0.448093,0.539014,0.468530,0.809947,0.104579,0.578033,0.681109,0.275010}
        ,{0.239191,0.928757,0.345280,0.067943,0.356484,0.977198,0.186382,0.583214,0.285643,0.043111,0.970875,0.456988,0.757523,0.709469,0.181192,0.687924,0.505370,0.195000,0.645664,0.518272,0.955095,0.710237,0.786284,0.955128,0.135146,0.881683,0.456981,0.045890,0.400173,0.045109,0.796091,0.685579,0.210311,0.468766,0.407077,0.258728,0.954576,0.984564,0.737941,0.707609,0.555508,0.654801,0.830614,0.543676,0.908550,0.637809,0.193854,0.298809,0.934055,0.027958}
        ,{0.064059,0.888317,0.091606,0.573534,0.303346,0.936084,0.443134,0.950022,0.593687,0.556122,0.435472,0.882790,0.791912,0.946538,0.097264,0.166438,0.741860,0.063338,0.153469,0.844632,0.183120,0.664641,0.601409,0.878799,0.550339,0.893270,0.595555,0.101306,0.763506,0.201045,0.210988,0.353740,0.683644,0.243383,0.126576,0.439927,0.814564,0.846598,0.310720,0.080567,0.790544,0.588746,0.126663,0.442453,0.417147,0.898069,0.363070,0.435666,0.947389,0.940613}
        ,{0.003369,0.790044,0.631601,0.439199,0.967760,0.892737,0.488120,0.100039,0.370530,0.611287,0.635382,0.493573,0.385880,0.298020,0.031315,0.652227,0.943850,0.063902,0.052182,0.228757,0.670428,0.831781,0.947014,0.609732,0.053838,0.386000,0.110083,0.468935,0.164068,0.042863,0.174414,0.956791,0.154390,0.919917,0.925425,0.284289,0.623253,0.794512,0.600408,0.043308,0.443872,0.745055,0.513268,0.183745,0.544138,0.621821,0.874534,0.136633,0.599083,0.533970}
        ,{0.189073,0.074470,0.378188,0.027369,0.192292,0.443530,0.861131,0.878734,0.795638,0.738832,0.901555,0.622851,0.318054,0.995821,0.010176,0.768638,0.799325,0.939866,0.015051,0.428373,0.735596,0.258035,0.631218,0.967766,0.676553,0.727551,0.343784,0.710646,0.688290,0.639163,0.613842,0.243739,0.974316,0.715834,0.005581,0.678768,0.328269,0.900278,0.781680,0.491156,0.995819,0.640870,0.715931,0.249231,0.699009,0.414607,0.599770,0.299721,0.948874,0.671173}
        ,{0.491204,0.419797,0.887363,0.049699,0.097864,0.751527,0.716456,0.891451,0.073534,0.256919,0.871584,0.562165,0.480925,0.554447,0.967447,0.395766,0.437726,0.520184,0.196363,0.368291,0.819551,0.769241,0.878837,0.634138,0.822281,0.912650,0.264065,0.601346,0.643317,0.251759,0.941056,0.748272,0.502662,0.488646,0.186388,0.949580,0.277368,0.780105,0.111533,0.446596,0.436587,0.503676,0.248146,0.285112,0.079050,0.647558,0.258113,0.761375,0.404018,0.607535}
        ,{0.616469,0.396724,0.426527,0.238553,0.693790,0.909403,0.620333,0.214037,0.992738,0.726259,0.142716,0.721661,0.278506,0.656088,0.888038,0.396264,0.090313,0.150116,0.527712,0.696048,0.681018,0.410567,0.122686,0.777265,0.911402,0.904127,0.580180,0.204917,0.821354,0.419884,0.661565,0.390228,0.891408,0.078074,0.324061,0.773955,0.434377,0.836511,0.579329,0.486799,0.304441,0.938041,0.531900,0.529510,0.509416,0.489269,0.358428,0.035303,0.041032,0.750873}
        ,{0.122776,0.412931,0.890774,0.127301,0.096024,0.373318,0.089774,0.166952,0.776029,0.713253,0.200598,0.546770,0.158036,0.945349,0.049685,0.692120,0.933568,0.646592,0.147672,0.944381,0.330059,0.055657,0.813548,0.898504,0.147205,0.081452,0.435391,0.618787,0.378547,0.171836,0.214898,0.844757,0.726491,0.530066,0.050187,0.636139,0.350296,0.321093,0.870371,0.165891,0.246510,0.605344,0.382210,0.559837,0.486898,0.093755,0.887540,0.269500,0.293826,0.981322}
        ,{0.133032,0.973954,0.224230,0.630329,0.199386,0.116291,0.111761,0.646125,0.007370,0.503765,0.620928,0.784441,0.395408,0.224637,0.670207,0.237673,0.378376,0.583782,0.073134,0.217886,0.034692,0.870649,0.977604,0.226566,0.304862,0.033342,0.415100,0.699150,0.111901,0.884456,0.913590,0.371984,0.497180,0.666050,0.144537,0.753581,0.877759,0.742746,0.689776,0.360657,0.960825,0.638924,0.801761,0.415146,0.855880,0.637323,0.900531,0.996269,0.031939,0.727670}
        ,{0.314181,0.237895,0.796930,0.476414,0.607055,0.525121,0.575589,0.180344,0.888948,0.892770,0.775029,0.446353,0.285456,0.981518,0.976621,0.948883,0.758922,0.312334,0.554839,0.753004,0.120189,0.972300,0.231243,0.101267,0.779872,0.572409,0.054213,0.314829,0.859483,0.341014,0.380197,0.707606,0.607214,0.607713,0.729369,0.746817,0.006154,0.664494,0.242970,0.880722,0.222881,0.702657,0.670861,0.905680,0.614405,0.950262,0.447952,0.446946,0.864513,0.857321}
        ,{0.087855,0.108576,0.858281,0.109997,0.709711,0.341125,0.461657,0.116550,0.864125,0.779385,0.246811,0.911908,0.243051,0.170622,0.220266,0.135752,0.803793,0.672144,0.981283,0.519839,0.283713,0.116976,0.912736,0.828259,0.487228,0.009290,0.259696,0.804789,0.713183,0.205124,0.034982,0.345655,0.349289,0.419551,0.482280,0.586031,0.696449,0.289184,0.342722,0.744352,0.395609,0.860949,0.982859,0.305143,0.117415,0.476376,0.268851,0.152785,0.432546,0.991843}
        ,{0.408793,0.800029,0.427096,0.435432,0.890528,0.849403,0.545449,0.365334,0.697594,0.494860,0.369452,0.086587,0.642520,0.941060,0.084059,0.511515,0.804236,0.397056,0.162861,0.760075,0.838236,0.508313,0.676368,0.424470,0.549174,0.198328,0.244178,0.178022,0.575010,0.795387,0.227345,0.877158,0.526215,0.110798,0.338065,0.773056,0.338063,0.337372,0.545440,0.416771,0.224525,0.379662,0.936821,0.649770,0.606873,0.602805,0.553815,0.886228,0.092809,0.759460}
        ,{0.282319,0.044813,0.588860,0.901879,0.602642,0.186232,0.038012,0.402375,0.884992,0.761507,0.341097,0.998937,0.956924,0.956960,0.358865,0.041431,0.595794,0.219516,0.156598,0.880870,0.901353,0.755566,0.725066,0.727096,0.878217,0.020680,0.709095,0.241306,0.741138,0.024470,0.906887,0.750528,0.796915,0.816614,0.236767,0.392488,0.304984,0.908637,0.067573,0.907355,0.270025,0.712123,0.576272,0.288782,0.164180,0.591483,0.178848,0.031380,0.137792,0.146041}
        ,{0.630590,0.959956,0.091699,0.565834,0.862453,0.208745,0.579286,0.089810,0.465645,0.667045,0.456390,0.727581,0.186336,0.175015,0.733183,0.312410,0.324987,0.240821,0.163671,0.237478,0.449947,0.109987,0.685790,0.936748,0.988291,0.792271,0.658851,0.594730,0.753671,0.039780,0.868988,0.434425,0.273676,0.249305,0.450863,0.605290,0.648101,0.032251,0.410448,0.094307,0.418441,0.523520,0.080186,0.255251,0.399026,0.225262,0.859702,0.116035,0.241971,0.326305}
        ,{0.219755,0.801644,0.250583,0.730644,0.675957,0.530431,0.628978,0.683768,0.371558,0.978112,0.170824,0.558407,0.909517,0.054310,0.602144,0.321770,0.748348,0.386376,0.078490,0.939694,0.988536,0.033864,0.796719,0.296532,0.019152,0.190829,0.119181,0.868233,0.555088,0.529819,0.582469,0.400661,0.292684,0.509178,0.185451,0.247433,0.921146,0.696358,0.237511,0.181326,0.997736,0.363489,0.413825,0.358183,0.532357,0.668433,0.231976,0.250855,0.223009,0.028786}
        ,{0.654254,0.960596,0.593771,0.980960,0.784999,0.084285,0.481927,0.546894,0.083022,0.117071,0.745606,0.142824,0.568740,0.268208,0.451371,0.948322,0.476472,0.033501,0.718401,0.027152,0.033789,0.441098,0.529627,0.312200,0.351324,0.952083,0.129219,0.818668,0.800912,0.933367,0.560786,0.372938,0.348152,0.804133,0.324255,0.290202,0.893074,0.208770,0.488974,0.946587,0.911030,0.434676,0.180845,0.805918,0.875211,0.156552,0.168105,0.759675,0.867740,0.694551}
        ,{0.193468,0.765749,0.520579,0.588209,0.536648,0.240770,0.160527,0.985959,0.997219,0.869323,0.097978,0.837637,0.193516,0.546010,0.912804,0.207341,0.515591,0.346723,0.446265,0.561514,0.859450,0.129784,0.754639,0.549696,0.534647,0.770226,0.077969,0.590084,0.670346,0.602215,0.001089,0.443250,0.875973,0.509830,0.263971,0.019333,0.997179,0.824149,0.806067,0.100849,0.550427,0.687598,0.995631,0.538927,0.659039,0.774251,0.026723,0.898310,0.764177,0.958757}

    };

    IntensityForce::AttrMatrix mat(S,1);
    for (int i = 0; i < S; i++) {
        for (int j = 0; j < L; j++) {
            mat(i,0).x[j] = data[j][i];
        }
    }
//    for (int i = 0; i < S; i++) {
//        for (int j = 0; j < L; j++) {
//            cout << " " << mat(i,0).x[j];
//        }
//        cout << endl;
//    }
    force.NormalizeAttributes(mat);
//    for (int i = 0; i < S; i++) {
//        for (int j = 0; j < L; j++) {
//            cout << " " << mat(i,0).y[j];
//        }
//        cout << endl;
//    }


    // covariance computes on y
    VNLDoubleMatrix cov;
    force.ComputeCovariance(mat, 0, cov);
    cout << cov << endl;

    {
        IntensityForce::AttrMatrix mat(S1,1);
        for (int i = 0; i < S1; i++) {
            for (int j = 0; j < L; j++) {
                mat(i,0).x[j] = data1[j][i];
            }
        }
        force.NormalizeAttributes(mat);
        // covariance computes on y
        VNLDoubleMatrix cov;
        force.ComputeCovariance(mat, 0, cov);
//        cout << cov << endl;
    }

    EntropyComputer comp(S,L,1);
    for (int i = 0; i < S; i++) {
        for (int j = 0; j < L; j++) {
            comp.dataIter.At(i,j) = data[j][i];
        }
    }

//    cout << comp.dataMatrix << endl; 
    comp.MoveToCenter();
//    cout << comp.dataMatrix << endl;

    comp.ComputeCovariance();
    cout << comp.mean << endl;
    cout << comp.covariance << endl;

    
}

void entropytest() {
    const int S = 2;
    const int L = 3;
    double data[S][L] = { { 0, 0, 0}, { 1, 1, 0} };
    EntropyComputer comp(S,L,1);
    for (int i = 0; i < S; i++) {
        for (int j = 0; j < L; j++) {
            comp.dataIter.At(i,j) = data[i][j];
        }
    }
    comp.MoveToCenter();
    comp.ComputeCovariance();

    VNLDoubleMatrix gradientOut;
    comp.ComputeGradient();
    cout << comp.covariance << endl;
    cout << comp.inverseCovariance << endl;
    cout << comp.dataMatrix << endl;
    cout << gradientOut << endl;
}

void cleanImage(const char* a, const char* b) {
    typedef itk::Image<short,3> I;
    itkcmds::itkImageIO<I> io;
    I::Pointer img = io.ReadImageT(a);

    itk::ImageRegionIterator<I> iter(img, img->GetBufferedRegion());
    iter.GoToBegin();
    while (!iter.IsAtEnd()) {
        if (iter.Get() < 0) {
            iter.Set(0);
        }
        ++iter;
    }
    io.WriteImageT(b, img);
}

int main(int argc, char* argv[]) {
//    covtest();
//    entropytest();
    cleanImage(argv[1], argv[2]);
}
